{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"GAN_practise","provenance":[],"authorship_tag":"ABX9TyPrA81xdKIDD45aNmXqRl3n"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"NRqFCt4lFkKU","colab_type":"code","colab":{}},"source":["import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"7yUJG8ZSGel2","colab_type":"code","outputId":"3b089082-8ca7-4528-bc35-f96255b57b2d","executionInfo":{"status":"ok","timestamp":1579063378203,"user_tz":-330,"elapsed":1136,"user":{"displayName":"Venkatesh Nagandla","photoUrl":"","userId":"00105523213734113975"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["%tensorflow_version 2.x"],"execution_count":2,"outputs":[{"output_type":"stream","text":["TensorFlow 2.x selected.\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"YJJDysRWGo3o","colab_type":"code","colab":{}},"source":["import tensorflow as tf\n","from tensorflow import keras"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Uoqyj58CGzMO","colab_type":"code","colab":{}},"source":["from tensorflow.keras.datasets import mnist"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"25YnTdniG-EK","colab_type":"code","outputId":"a2702b29-478b-40a7-f228-820dfe2830d1","executionInfo":{"status":"ok","timestamp":1579063390770,"user_tz":-330,"elapsed":13616,"user":{"displayName":"Venkatesh Nagandla","photoUrl":"","userId":"00105523213734113975"}},"colab":{"base_uri":"https://localhost:8080/","height":71}},"source":["(X_train, y_train), (X_test, y_test) = mnist.load_data()"],"execution_count":5,"outputs":[{"output_type":"stream","text":["Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz\n","11493376/11490434 [==============================] - 0s 0us/step\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"4VA09G4uHJy5","colab_type":"code","outputId":"e9b3e624-4205-48bc-e213-1e9371b5f2a5","executionInfo":{"status":"ok","timestamp":1579063390773,"user_tz":-330,"elapsed":13570,"user":{"displayName":"Venkatesh Nagandla","photoUrl":"","userId":"00105523213734113975"}},"colab":{"base_uri":"https://localhost:8080/","height":282}},"source":["plt.imshow(X_train[0])"],"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.image.AxesImage at 0x7fed7aa920f0>"]},"metadata":{"tags":[]},"execution_count":6},{"output_type":"display_data","data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAAPsAAAD4CAYAAAAq5pAIAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjIsIGh0\ndHA6Ly9tYXRwbG90bGliLm9yZy8li6FKAAAOZ0lEQVR4nO3dbYxc5XnG8euKbezamMQbB9chLjjg\nFAg0Jl0ZEBZQobgOqgSoCsSKIkJpnSY4Ca0rQWlV3IpWbpUQUUqRTHExFS+BBIQ/0CTUQpCowWWh\nBgwEDMY0NmaNWYENIX5Z3/2w42iBnWeXmTMv3vv/k1Yzc+45c24NXD5nznNmHkeEAIx/H+p0AwDa\ng7ADSRB2IAnCDiRB2IEkJrZzY4d5ckzRtHZuEkjlV3pbe2OPR6o1FXbbiyVdJ2mCpH+LiJWl50/R\nNJ3qc5rZJICC9bGubq3hw3jbEyTdIOnzkk6UtMT2iY2+HoDWauYz+wJJL0TE5ojYK+lOSedV0xaA\nqjUT9qMk/WLY4621Ze9ie6ntPtt9+7Snic0BaEbLz8ZHxKqI6I2I3kma3OrNAaijmbBvkzRn2ONP\n1JYB6ELNhP1RSfNsz7V9mKQvSlpbTVsAqtbw0FtE7Le9TNKPNDT0tjoinq6sMwCVamqcPSLul3R/\nRb0AaCEulwWSIOxAEoQdSIKwA0kQdiAJwg4kQdiBJAg7kARhB5Ig7EAShB1IgrADSRB2IAnCDiRB\n2IEkCDuQBGEHkiDsQBKEHUiCsANJEHYgCcIOJEHYgSQIO5AEYQeSIOxAEoQdSIKwA0kQdiCJpmZx\nRffzxPJ/4gkfm9nS7T/3F8fUrQ1OPVBc9+hjdxTrU7/uYv3Vaw+rW3u893vFdXcOvl2sn3r38mL9\nuD9/pFjvhKbCbnuLpN2SBiXtj4jeKpoCUL0q9uy/FxE7K3gdAC3EZ3YgiWbDHpJ+bPsx20tHeoLt\npbb7bPft054mNwegUc0exi+MiG22j5T0gO2fR8TDw58QEaskrZKkI9wTTW4PQIOa2rNHxLba7Q5J\n90paUEVTAKrXcNhtT7M9/eB9SYskbayqMQDVauYwfpake20ffJ3bI+KHlXQ1zkw4YV6xHpMnFeuv\nnPWRYv2d0+qPCfd8uDxe/JPPlMebO+k/fzm9WP/Hf1lcrK8/+fa6tZf2vVNcd2X/54r1j//k0PtE\n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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"6JvnLcGxHMrT","colab_type":"code","outputId":"7ae869d9-8417-48ee-d4f1-9dc533b1b644","executionInfo":{"status":"ok","timestamp":1579063390775,"user_tz":-330,"elapsed":13546,"user":{"displayName":"Venkatesh Nagandla","photoUrl":"","userId":"00105523213734113975"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["y_train"],"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([5, 0, 4, ..., 5, 6, 8], dtype=uint8)"]},"metadata":{"tags":[]},"execution_count":7}]},{"cell_type":"code","metadata":{"id":"SgAC39aUHY_b","colab_type":"code","colab":{}},"source":["only_zeros = X_train[y_train==0]"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"44Utv23EICI7","colab_type":"code","outputId":"c957cbee-8b57-4569-daa5-dbc9cd1be582","executionInfo":{"status":"ok","timestamp":1579063391205,"user_tz":-330,"elapsed":13939,"user":{"displayName":"Venkatesh Nagandla","photoUrl":"","userId":"00105523213734113975"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["only_zeros.shape"],"execution_count":9,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(5923, 28, 28)"]},"metadata":{"tags":[]},"execution_count":9}]},{"cell_type":"code","metadata":{"id":"oHu0IR15IE2p","colab_type":"code","outputId":"88a2d102-5916-44a4-839d-82a5b1ba1ff6","executionInfo":{"status":"ok","timestamp":1579063391207,"user_tz":-330,"elapsed":13919,"user":{"displayName":"Venkatesh Nagandla","photoUrl":"","userId":"00105523213734113975"}},"colab":{"base_uri":"https://localhost:8080/","height":282}},"source":["plt.imshow(only_zeros[950])"],"execution_count":10,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.image.AxesImage at 0x7fed7a5d5cc0>"]},"metadata":{"tags":[]},"execution_count":10},{"output_type":"display_data","data":{"image/png":"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\ngg==\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"9NvdaPJ3IIZ4","colab_type":"code","colab":{}},"source":["from tensorflow.keras.layers import Dense,Reshape,Flatten\n","from tensorflow.keras.models import Sequential"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"4SbJ-kqfJRsC","colab_type":"code","colab":{}},"source":["discriminator = Sequential()\n","discriminator.add(Flatten(input_shape=[28,28]))\n","discriminator.add(Dense(150,activation='relu'))\n","discriminator.add(Dense(100,activation='relu'))\n","discriminator.add(Dense(1,activation=\"sigmoid\"))\n","\n","discriminator.compile(loss=\"binary_crossentropy\", optimizer=\"adam\")"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"ifYpfPZ1g3Zo","colab_type":"code","colab":{}},"source":["np.random.seed(42)\n","tf.random.set_seed(42)\n","\n","codings_size = 100\n","\n","generator = Sequential()\n","generator.add(Dense(100, activation=\"relu\", input_shape=[codings_size]))\n","generator.add(Dense(150,activation='relu'))\n","generator.add(Dense(784, activation=\"sigmoid\")) # 28*28 = 784\n","generator.add(Reshape([28,28]))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"li-YLODSiHKI","colab_type":"code","colab":{}},"source":["GAN = Sequential([generator, discriminator])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"LJkmY6SDi8q2","colab_type":"code","colab":{}},"source":["discriminator.trainable = False"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"28kzioNKi9kZ","colab_type":"code","colab":{}},"source":["GAN.compile(loss=\"binary_crossentropy\", optimizer=\"adam\")"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Fj5nWyx1jCk_","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":51},"outputId":"64de9629-63a6-401c-8f16-f0d83e679ff6","executionInfo":{"status":"ok","timestamp":1579064003503,"user_tz":-330,"elapsed":1105,"user":{"displayName":"Venkatesh Nagandla","photoUrl":"","userId":"00105523213734113975"}}},"source":["GAN.layers"],"execution_count":19,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[<tensorflow.python.keras.engine.sequential.Sequential at 0x7fed742bfc18>,\n"," <tensorflow.python.keras.engine.sequential.Sequential at 0x7fed74300080>]"]},"metadata":{"tags":[]},"execution_count":19}]},{"cell_type":"code","metadata":{"id":"V3OmtdaajIbI","colab_type":"code","colab":{}},"source":["batch_size = 32"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"qmWhWTnVlu4u","colab_type":"code","colab":{}},"source":["# my_data = X_train\n","my_data = only_zeros"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"goJysq_Rlzj4","colab_type":"code","colab":{}},"source":["dataset = tf.data.Dataset.from_tensor_slices(my_data).shuffle(buffer_size=1000)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"rh6hCbnGl3GP","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"outputId":"840b6b6a-5551-4372-d835-4222d129d448","executionInfo":{"status":"ok","timestamp":1579064757564,"user_tz":-330,"elapsed":843,"user":{"displayName":"Venkatesh Nagandla","photoUrl":"","userId":"00105523213734113975"}}},"source":["type(dataset)"],"execution_count":23,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tensorflow.python.data.ops.dataset_ops.ShuffleDataset"]},"metadata":{"tags":[]},"execution_count":23}]},{"cell_type":"code","metadata":{"id":"Wgm4uvjCmAlW","colab_type":"code","colab":{}},"source":["dataset = dataset.batch(batch_size, drop_remainder=True).prefetch(1)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"XrSi5fpNmITj","colab_type":"code","colab":{}},"source":["epochs = 1"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"8s0pF44kmOE2","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":221},"outputId":"75c32d5e-62cd-49a7-992a-89dd54fbde6d","executionInfo":{"status":"ok","timestamp":1579065195220,"user_tz":-330,"elapsed":754,"user":{"displayName":"Venkatesh Nagandla","photoUrl":"","userId":"00105523213734113975"}}},"source":["GAN.summary()"],"execution_count":26,"outputs":[{"output_type":"stream","text":["Model: \"sequential_3\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","sequential_2 (Sequential)    (None, 28, 28)            143634    \n","_________________________________________________________________\n","sequential_1 (Sequential)    (None, 1)                 132951    \n","=================================================================\n","Total params: 276,585\n","Trainable params: 143,634\n","Non-trainable params: 132,951\n","_________________________________________________________________\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"LqU3LLtDnrcL","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":289},"outputId":"ddcd8604-0e29-4a28-a73b-a4817967ad94","executionInfo":{"status":"ok","timestamp":1579065210591,"user_tz":-330,"elapsed":785,"user":{"displayName":"Venkatesh Nagandla","photoUrl":"","userId":"00105523213734113975"}}},"source":["GAN.layers[0].summary()"],"execution_count":27,"outputs":[{"output_type":"stream","text":["Model: \"sequential_2\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","dense_6 (Dense)              (None, 100)               10100     \n","_________________________________________________________________\n","dense_7 (Dense)              (None, 150)               15150     \n","_________________________________________________________________\n","dense_8 (Dense)              (None, 784)               118384    \n","_________________________________________________________________\n","reshape (Reshape)            (None, 28, 28)            0         \n","=================================================================\n","Total params: 143,634\n","Trainable params: 143,634\n","Non-trainable params: 0\n","_________________________________________________________________\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"N12ScgFRnvMC","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":326},"outputId":"04148128-6f36-4465-962b-1b1ff044d0c1","executionInfo":{"status":"ok","timestamp":1579065230249,"user_tz":-330,"elapsed":777,"user":{"displayName":"Venkatesh Nagandla","photoUrl":"","userId":"00105523213734113975"}}},"source":["GAN.layers[1].summary()"],"execution_count":28,"outputs":[{"output_type":"stream","text":["Model: \"sequential_1\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","flatten_1 (Flatten)          (None, 784)               0         \n","_________________________________________________________________\n","dense_3 (Dense)              (None, 150)               117750    \n","_________________________________________________________________\n","dense_4 (Dense)              (None, 100)               15100     \n","_________________________________________________________________\n","dense_5 (Dense)              (None, 1)                 101       \n","=================================================================\n","WARNING:tensorflow:Discrepancy between trainable weights and collected trainable weights, did you set `model.trainable` without calling `model.compile` after ?\n","Total params: 265,902\n","Trainable params: 132,951\n","Non-trainable params: 132,951\n","_________________________________________________________________\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"uZ6-LnI_nz_W","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":68},"outputId":"dfd9c39f-4c65-42bc-f8c9-cf9e633030ab","executionInfo":{"status":"ok","timestamp":1579066726512,"user_tz":-330,"elapsed":3958,"user":{"displayName":"Venkatesh Nagandla","photoUrl":"","userId":"00105523213734113975"}}},"source":["# Grab the seprate components\n","generator, discriminator = GAN.layers\n","\n","# For every epcoh\n","for epoch in range(epochs):\n","    print(f\"Currently on Epoch {epoch+1}\")\n","    i = 0\n","    # For every batch in the dataset\n","    for X_batch in dataset:\n","        i=i+1\n","        if i%100 == 0:\n","            print(f\"\\tCurrently on batch number {i} of {len(my_data)//batch_size}\")\n","        #####################################\n","        ## TRAINING THE DISCRIMINATOR ######\n","        ###################################\n","        \n","        # Create Noise\n","        noise = tf.random.normal(shape=[batch_size, codings_size])\n","        \n","        # Generate numbers based just on noise input\n","        gen_images = generator(noise)\n","        \n","        # Concatenate Generated Images against the Real Ones\n","        # TO use tf.concat, the data types must match!\n","        X_fake_vs_real = tf.concat([gen_images, tf.dtypes.cast(X_batch,tf.float32)], axis=0)\n","        \n","        # Targets set to zero for fake images and 1 for real images\n","        y1 = tf.constant([[0.]] * batch_size + [[1.]] * batch_size)\n","        \n","        # This gets rid of a Keras warning\n","        discriminator.trainable = True\n","        \n","        # Train the discriminator on this batch\n","        discriminator.train_on_batch(X_fake_vs_real, y1)\n","        \n","        \n","        #####################################\n","        ## TRAINING THE GENERATOR     ######\n","        ###################################\n","        \n","        # Create some noise\n","        noise = tf.random.normal(shape=[batch_size, codings_size])\n","        \n","        # We want discriminator to belive that fake images are real\n","        y2 = tf.constant([[1.]] * batch_size)\n","        \n","        # Avois a warning\n","        discriminator.trainable = False\n","        \n","        GAN.train_on_batch(noise, y2)\n","        \n","print(\"TRAINING COMPLETE\")            "],"execution_count":29,"outputs":[{"output_type":"stream","text":["Currently on Epoch 1\n","\tCurrently on batch number 100 of 185\n","TRAINING COMPLETE\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"hlj7xhYFtgfl","colab_type":"code","colab":{}},"source":["noise = tf.random.normal(shape=[10, codings_size])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"HlQDXE9R2_mQ","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"outputId":"1c331e95-5f4c-47f3-df9c-20187fe8b8c4","executionInfo":{"status":"ok","timestamp":1579069222895,"user_tz":-330,"elapsed":916,"user":{"displayName":"Venkatesh Nagandla","photoUrl":"","userId":"00105523213734113975"}}},"source":["noise.shape"],"execution_count":31,"outputs":[{"output_type":"execute_result","data":{"text/plain":["TensorShape([10, 100])"]},"metadata":{"tags":[]},"execution_count":31}]},{"cell_type":"code","metadata":{"id":"KtqyCiOD3Cu8","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":101},"outputId":"abaec691-3e0d-4c86-f284-5df10f39a3bf","executionInfo":{"status":"ok","timestamp":1579069235698,"user_tz":-330,"elapsed":1001,"user":{"displayName":"Venkatesh Nagandla","photoUrl":"","userId":"00105523213734113975"}}},"source":["plt.imshow(noise)"],"execution_count":32,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.image.AxesImage at 0x7fed71a99f60>"]},"metadata":{"tags":[]},"execution_count":32},{"output_type":"display_data","data":{"image/png":"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\nR2x3AAAAAElFTkSuQmCC\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"tNOYA-w83F1K","colab_type":"code","colab":{}},"source":["image = generator(noise)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"tDnLMYiF3JdB","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":282},"outputId":"678c4715-e2be-4b26-8190-6eaa7eef88fb","executionInfo":{"status":"ok","timestamp":1579069275819,"user_tz":-330,"elapsed":915,"user":{"displayName":"Venkatesh Nagandla","photoUrl":"","userId":"00105523213734113975"}}},"source":["plt.imshow(image[5])"],"execution_count":34,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.image.AxesImage at 0x7fed71a67f28>"]},"metadata":{"tags":[]},"execution_count":34},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"qsXkybXt3PoN","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]}]}