{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"SVM_python","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyP8V2OPTqb4l0Xp3xQUBuDd"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"pU7iUzydpco-","colab_type":"code","colab":{}},"source":["import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","%matplotlib inline"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"fkvSLPHRqNY3","colab_type":"code","colab":{}},"source":["from sklearn.datasets import load_breast_cancer"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"_2zlNlWnqcZM","colab_type":"code","colab":{}},"source":["cancer = load_breast_cancer()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Ijrp9o2zqgbI","colab_type":"code","outputId":"aa2a08fe-4532-40e4-8541-ca6670a172f2","executionInfo":{"status":"ok","timestamp":1579158372239,"user_tz":-330,"elapsed":2693,"user":{"displayName":"Venkatesh Nagandla","photoUrl":"","userId":"00105523213734113975"}},"colab":{"base_uri":"https://localhost:8080/","height":55}},"source":["#Dataset presented in a dictionary format\n","\n","cancer.keys()"],"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/plain":["dict_keys(['data', 'target', 'target_names', 'DESCR', 'feature_names', 'filename'])"]},"metadata":{"tags":[]},"execution_count":4}]},{"cell_type":"code","metadata":{"id":"FgXcyhg9qqyc","colab_type":"code","outputId":"5819927a-b3fa-4dfa-b42b-88837a1ddd19","executionInfo":{"status":"ok","timestamp":1579158372241,"user_tz":-330,"elapsed":2638,"user":{"displayName":"Venkatesh Nagandla","photoUrl":"","userId":"00105523213734113975"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["print(cancer['DESCR'])"],"execution_count":5,"outputs":[{"output_type":"stream","text":[".. _breast_cancer_dataset:\n","\n","Breast cancer wisconsin (diagnostic) dataset\n","--------------------------------------------\n","\n","**Data Set Characteristics:**\n","\n","    :Number of Instances: 569\n","\n","    :Number of Attributes: 30 numeric, predictive attributes and the class\n","\n","    :Attribute Information:\n","        - radius (mean of distances from center to points on the perimeter)\n","        - texture (standard deviation of gray-scale values)\n","        - perimeter\n","        - area\n","        - smoothness (local variation in radius lengths)\n","        - compactness (perimeter^2 / area - 1.0)\n","        - concavity (severity of concave portions of the contour)\n","        - concave points (number of concave portions of the contour)\n","        - symmetry \n","        - fractal dimension (\"coastline approximation\" - 1)\n","\n","        The mean, standard error, and \"worst\" or largest (mean of the three\n","        largest values) of these features were computed for each image,\n","        resulting in 30 features.  For instance, field 3 is Mean Radius, field\n","        13 is Radius SE, field 23 is Worst Radius.\n","\n","        - class:\n","                - WDBC-Malignant\n","                - WDBC-Benign\n","\n","    :Summary Statistics:\n","\n","    ===================================== ====== ======\n","                                           Min    Max\n","    ===================================== ====== ======\n","    radius (mean):                        6.981  28.11\n","    texture (mean):                       9.71   39.28\n","    perimeter (mean):                     43.79  188.5\n","    area (mean):                          143.5  2501.0\n","    smoothness (mean):                    0.053  0.163\n","    compactness (mean):                   0.019  0.345\n","    concavity (mean):                     0.0    0.427\n","    concave points (mean):                0.0    0.201\n","    symmetry (mean):                      0.106  0.304\n","    fractal dimension (mean):             0.05   0.097\n","    radius (standard error):              0.112  2.873\n","    texture (standard error):             0.36   4.885\n","    perimeter (standard error):           0.757  21.98\n","    area (standard error):                6.802  542.2\n","    smoothness (standard error):          0.002  0.031\n","    compactness (standard error):         0.002  0.135\n","    concavity (standard error):           0.0    0.396\n","    concave points (standard error):      0.0    0.053\n","    symmetry (standard error):            0.008  0.079\n","    fractal dimension (standard error):   0.001  0.03\n","    radius (worst):                       7.93   36.04\n","    texture (worst):                      12.02  49.54\n","    perimeter (worst):                    50.41  251.2\n","    area (worst):                         185.2  4254.0\n","    smoothness (worst):                   0.071  0.223\n","    compactness (worst):                  0.027  1.058\n","    concavity (worst):                    0.0    1.252\n","    concave points (worst):               0.0    0.291\n","    symmetry (worst):                     0.156  0.664\n","    fractal dimension (worst):            0.055  0.208\n","    ===================================== ====== ======\n","\n","    :Missing Attribute Values: None\n","\n","    :Class Distribution: 212 - Malignant, 357 - Benign\n","\n","    :Creator:  Dr. William H. Wolberg, W. Nick Street, Olvi L. Mangasarian\n","\n","    :Donor: Nick Street\n","\n","    :Date: November, 1995\n","\n","This is a copy of UCI ML Breast Cancer Wisconsin (Diagnostic) datasets.\n","https://goo.gl/U2Uwz2\n","\n","Features are computed from a digitized image of a fine needle\n","aspirate (FNA) of a breast mass.  They describe\n","characteristics of the cell nuclei present in the image.\n","\n","Separating plane described above was obtained using\n","Multisurface Method-Tree (MSM-T) [K. P. Bennett, \"Decision Tree\n","Construction Via Linear Programming.\" Proceedings of the 4th\n","Midwest Artificial Intelligence and Cognitive Science Society,\n","pp. 97-101, 1992], a classification method which uses linear\n","programming to construct a decision tree.  Relevant features\n","were selected using an exhaustive search in the space of 1-4\n","features and 1-3 separating planes.\n","\n","The actual linear program used to obtain the separating plane\n","in the 3-dimensional space is that described in:\n","[K. P. Bennett and O. L. Mangasarian: \"Robust Linear\n","Programming Discrimination of Two Linearly Inseparable Sets\",\n","Optimization Methods and Software 1, 1992, 23-34].\n","\n","This database is also available through the UW CS ftp server:\n","\n","ftp ftp.cs.wisc.edu\n","cd math-prog/cpo-dataset/machine-learn/WDBC/\n","\n",".. topic:: References\n","\n","   - W.N. Street, W.H. Wolberg and O.L. Mangasarian. Nuclear feature extraction \n","     for breast tumor diagnosis. IS&T/SPIE 1993 International Symposium on \n","     Electronic Imaging: Science and Technology, volume 1905, pages 861-870,\n","     San Jose, CA, 1993.\n","   - O.L. Mangasarian, W.N. Street and W.H. Wolberg. Breast cancer diagnosis and \n","     prognosis via linear programming. Operations Research, 43(4), pages 570-577, \n","     July-August 1995.\n","   - W.H. Wolberg, W.N. Street, and O.L. Mangasarian. Machine learning techniques\n","     to diagnose breast cancer from fine-needle aspirates. Cancer Letters 77 (1994) \n","     163-171.\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"GZ0WndZ5q461","colab_type":"code","outputId":"37822949-1c43-4602-96c1-cabf0dc41281","executionInfo":{"status":"ok","timestamp":1579158372941,"user_tz":-330,"elapsed":3301,"user":{"displayName":"Venkatesh Nagandla","photoUrl":"","userId":"00105523213734113975"}},"colab":{"base_uri":"https://localhost:8080/","height":199}},"source":["cancer['feature_names']"],"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array(['mean radius', 'mean texture', 'mean perimeter', 'mean area',\n","       'mean smoothness', 'mean compactness', 'mean concavity',\n","       'mean concave points', 'mean symmetry', 'mean fractal dimension',\n","       'radius error', 'texture error', 'perimeter error', 'area error',\n","       'smoothness error', 'compactness error', 'concavity error',\n","       'concave points error', 'symmetry error',\n","       'fractal dimension error', 'worst radius', 'worst texture',\n","       'worst perimeter', 'worst area', 'worst smoothness',\n","       'worst compactness', 'worst concavity', 'worst concave points',\n","       'worst symmetry', 'worst fractal dimension'], dtype='<U23')"]},"metadata":{"tags":[]},"execution_count":6}]},{"cell_type":"code","metadata":{"id":"qaPgqbi9rIZd","colab_type":"code","outputId":"4796017e-7395-4b5e-fce4-028caccd5a84","executionInfo":{"status":"ok","timestamp":1579158372943,"user_tz":-330,"elapsed":3238,"user":{"displayName":"Venkatesh Nagandla","photoUrl":"","userId":"00105523213734113975"}},"colab":{"base_uri":"https://localhost:8080/","height":654}},"source":["df_feat = pd.DataFrame(cancer['data'],columns=cancer['feature_names'])\n","df_feat.info()"],"execution_count":7,"outputs":[{"output_type":"stream","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 569 entries, 0 to 568\n","Data columns (total 30 columns):\n","mean radius                569 non-null float64\n","mean texture               569 non-null float64\n","mean perimeter             569 non-null float64\n","mean area                  569 non-null float64\n","mean smoothness            569 non-null float64\n","mean compactness           569 non-null float64\n","mean concavity             569 non-null float64\n","mean concave points        569 non-null float64\n","mean symmetry              569 non-null float64\n","mean fractal dimension     569 non-null float64\n","radius error               569 non-null float64\n","texture error              569 non-null float64\n","perimeter error            569 non-null float64\n","area error                 569 non-null float64\n","smoothness error           569 non-null float64\n","compactness error          569 non-null float64\n","concavity error            569 non-null float64\n","concave points error       569 non-null float64\n","symmetry error             569 non-null float64\n","fractal dimension error    569 non-null float64\n","worst radius               569 non-null float64\n","worst texture              569 non-null float64\n","worst perimeter            569 non-null float64\n","worst area                 569 non-null float64\n","worst smoothness           569 non-null float64\n","worst compactness          569 non-null float64\n","worst concavity            569 non-null float64\n","worst concave points       569 non-null float64\n","worst symmetry             569 non-null float64\n","worst fractal dimension    569 non-null float64\n","dtypes: float64(30)\n","memory usage: 133.5 KB\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"gmNNy_h9tjyV","colab_type":"code","outputId":"bb9f0e2a-b89f-4afc-d3f2-53a6b2e3fbd9","executionInfo":{"status":"ok","timestamp":1579158372945,"user_tz":-330,"elapsed":3188,"user":{"displayName":"Venkatesh Nagandla","photoUrl":"","userId":"00105523213734113975"}},"colab":{"base_uri":"https://localhost:8080/","height":163}},"source":["df_feat.head(2)"],"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>mean radius</th>\n","      <th>mean texture</th>\n","      <th>mean perimeter</th>\n","      <th>mean area</th>\n","      <th>mean smoothness</th>\n","      <th>mean compactness</th>\n","      <th>mean concavity</th>\n","      <th>mean concave points</th>\n","      <th>mean symmetry</th>\n","      <th>mean fractal dimension</th>\n","      <th>radius error</th>\n","      <th>texture error</th>\n","      <th>perimeter error</th>\n","      <th>area error</th>\n","      <th>smoothness error</th>\n","      <th>compactness error</th>\n","      <th>concavity error</th>\n","      <th>concave points error</th>\n","      <th>symmetry error</th>\n","      <th>fractal dimension error</th>\n","      <th>worst radius</th>\n","      <th>worst texture</th>\n","      <th>worst perimeter</th>\n","      <th>worst area</th>\n","      <th>worst smoothness</th>\n","      <th>worst compactness</th>\n","      <th>worst concavity</th>\n","      <th>worst concave points</th>\n","      <th>worst symmetry</th>\n","      <th>worst fractal dimension</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>17.99</td>\n","      <td>10.38</td>\n","      <td>122.8</td>\n","      <td>1001.0</td>\n","      <td>0.11840</td>\n","      <td>0.27760</td>\n","      <td>0.3001</td>\n","      <td>0.14710</td>\n","      <td>0.2419</td>\n","      <td>0.07871</td>\n","      <td>1.0950</td>\n","      <td>0.9053</td>\n","      <td>8.589</td>\n","      <td>153.40</td>\n","      <td>0.006399</td>\n","      <td>0.04904</td>\n","      <td>0.05373</td>\n","      <td>0.01587</td>\n","      <td>0.03003</td>\n","      <td>0.006193</td>\n","      <td>25.38</td>\n","      <td>17.33</td>\n","      <td>184.6</td>\n","      <td>2019.0</td>\n","      <td>0.1622</td>\n","      <td>0.6656</td>\n","      <td>0.7119</td>\n","      <td>0.2654</td>\n","      <td>0.4601</td>\n","      <td>0.11890</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>20.57</td>\n","      <td>17.77</td>\n","      <td>132.9</td>\n","      <td>1326.0</td>\n","      <td>0.08474</td>\n","      <td>0.07864</td>\n","      <td>0.0869</td>\n","      <td>0.07017</td>\n","      <td>0.1812</td>\n","      <td>0.05667</td>\n","      <td>0.5435</td>\n","      <td>0.7339</td>\n","      <td>3.398</td>\n","      <td>74.08</td>\n","      <td>0.005225</td>\n","      <td>0.01308</td>\n","      <td>0.01860</td>\n","      <td>0.01340</td>\n","      <td>0.01389</td>\n","      <td>0.003532</td>\n","      <td>24.99</td>\n","      <td>23.41</td>\n","      <td>158.8</td>\n","      <td>1956.0</td>\n","      <td>0.1238</td>\n","      <td>0.1866</td>\n","      <td>0.2416</td>\n","      <td>0.1860</td>\n","      <td>0.2750</td>\n","      <td>0.08902</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   mean radius  mean texture  ...  worst symmetry  worst fractal dimension\n","0        17.99         10.38  ...          0.4601                  0.11890\n","1        20.57         17.77  ...          0.2750                  0.08902\n","\n","[2 rows x 30 columns]"]},"metadata":{"tags":[]},"execution_count":8}]},{"cell_type":"code","metadata":{"id":"V3tVIGEKtudi","colab_type":"code","outputId":"6def3e4f-1c2b-469b-ec36-9d225486db01","executionInfo":{"status":"ok","timestamp":1579158372947,"user_tz":-330,"elapsed":3146,"user":{"displayName":"Venkatesh Nagandla","photoUrl":"","userId":"00105523213734113975"}},"colab":{"base_uri":"https://localhost:8080/","height":490}},"source":["cancer['target']"],"execution_count":9,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1,\n","       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,\n","       0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0,\n","       1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0,\n","       1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1,\n","       1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0,\n","       0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1,\n","       1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0,\n","       0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0,\n","       1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1,\n","       1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","       0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0,\n","       0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0,\n","       0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0,\n","       1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1,\n","       1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1,\n","       1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0,\n","       1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1,\n","       1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1,\n","       1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1])"]},"metadata":{"tags":[]},"execution_count":9}]},{"cell_type":"code","metadata":{"id":"RnFnXUqit2Ah","colab_type":"code","outputId":"f0fd8530-0441-4c25-843a-02bca527469c","executionInfo":{"status":"ok","timestamp":1579158372949,"user_tz":-330,"elapsed":3107,"user":{"displayName":"Venkatesh Nagandla","photoUrl":"","userId":"00105523213734113975"}},"colab":{"base_uri":"https://localhost:8080/","height":35}},"source":["cancer['target_names']"],"execution_count":10,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array(['malignant', 'benign'], dtype='<U9')"]},"metadata":{"tags":[]},"execution_count":10}]},{"cell_type":"code","metadata":{"id":"yhMpaFd0t8hg","colab_type":"code","colab":{}},"source":["from sklearn.model_selection import train_test_split"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"YGqegQShuRuL","colab_type":"code","colab":{}},"source":["X = df_feat\n","y = cancer['target']\n","X_train, X_test, y_train, y_test = train_test_split(df_feat,y, test_size=0.30, random_state=101)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"jsj_XwQcusUU","colab_type":"code","colab":{}},"source":["from sklearn.svm import SVC"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"DgEkjNRPvHud","colab_type":"code","colab":{}},"source":["model = SVC()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"tpP4dVGsvMmx","colab_type":"code","outputId":"25158bc4-b860-41dd-936d-0de28a922d59","executionInfo":{"status":"ok","timestamp":1579158372959,"user_tz":-330,"elapsed":2962,"user":{"displayName":"Venkatesh Nagandla","photoUrl":"","userId":"00105523213734113975"}},"colab":{"base_uri":"https://localhost:8080/","height":90}},"source":["model.fit(X_train,y_train)"],"execution_count":15,"outputs":[{"output_type":"execute_result","data":{"text/plain":["SVC(C=1.0, break_ties=False, cache_size=200, class_weight=None, coef0=0.0,\n","    decision_function_shape='ovr', degree=3, gamma='scale', kernel='rbf',\n","    max_iter=-1, probability=False, random_state=None, shrinking=True,\n","    tol=0.001, verbose=False)"]},"metadata":{"tags":[]},"execution_count":15}]},{"cell_type":"code","metadata":{"id":"p6jPKNjevRiH","colab_type":"code","outputId":"879b4e37-303f-4a75-e52f-9d986a0dc66d","executionInfo":{"status":"ok","timestamp":1579158372961,"user_tz":-330,"elapsed":2869,"user":{"displayName":"Venkatesh Nagandla","photoUrl":"","userId":"00105523213734113975"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["help(SVC)"],"execution_count":16,"outputs":[{"output_type":"stream","text":["Help on class SVC in module sklearn.svm._classes:\n","\n","class SVC(sklearn.svm._base.BaseSVC)\n"," |  C-Support Vector Classification.\n"," |  \n"," |  The implementation is based on libsvm. The fit time scales at least\n"," |  quadratically with the number of samples and may be impractical\n"," |  beyond tens of thousands of samples. For large datasets\n"," |  consider using :class:`sklearn.svm.LinearSVC` or\n"," |  :class:`sklearn.linear_model.SGDClassifier` instead, possibly after a\n"," |  :class:`sklearn.kernel_approximation.Nystroem` transformer.\n"," |  \n"," |  The multiclass support is handled according to a one-vs-one scheme.\n"," |  \n"," |  For details on the precise mathematical formulation of the provided\n"," |  kernel functions and how `gamma`, `coef0` and `degree` affect each\n"," |  other, see the corresponding section in the narrative documentation:\n"," |  :ref:`svm_kernels`.\n"," |  \n"," |  Read more in the :ref:`User Guide <svm_classification>`.\n"," |  \n"," |  Parameters\n"," |  ----------\n"," |  C : float, optional (default=1.0)\n"," |      Regularization parameter. The strength of the regularization is\n"," |      inversely proportional to C. Must be strictly positive. The penalty\n"," |      is a squared l2 penalty.\n"," |  \n"," |  kernel : string, optional (default='rbf')\n"," |      Specifies the kernel type to be used in the algorithm.\n"," |      It must be one of 'linear', 'poly', 'rbf', 'sigmoid', 'precomputed' or\n"," |      a callable.\n"," |      If none is given, 'rbf' will be used. If a callable is given it is\n"," |      used to pre-compute the kernel matrix from data matrices; that matrix\n"," |      should be an array of shape ``(n_samples, n_samples)``.\n"," |  \n"," |  degree : int, optional (default=3)\n"," |      Degree of the polynomial kernel function ('poly').\n"," |      Ignored by all other kernels.\n"," |  \n"," |  gamma : {'scale', 'auto'} or float, optional (default='scale')\n"," |      Kernel coefficient for 'rbf', 'poly' and 'sigmoid'.\n"," |  \n"," |      - if ``gamma='scale'`` (default) is passed then it uses\n"," |        1 / (n_features * X.var()) as value of gamma,\n"," |      - if 'auto', uses 1 / n_features.\n"," |  \n"," |      .. versionchanged:: 0.22\n"," |         The default value of ``gamma`` changed from 'auto' to 'scale'.\n"," |  \n"," |  coef0 : float, optional (default=0.0)\n"," |      Independent term in kernel function.\n"," |      It is only significant in 'poly' and 'sigmoid'.\n"," |  \n"," |  shrinking : boolean, optional (default=True)\n"," |      Whether to use the shrinking heuristic.\n"," |  \n"," |  probability : boolean, optional (default=False)\n"," |      Whether to enable probability estimates. This must be enabled prior\n"," |      to calling `fit`, will slow down that method as it internally uses\n"," |      5-fold cross-validation, and `predict_proba` may be inconsistent with\n"," |      `predict`. Read more in the :ref:`User Guide <scores_probabilities>`.\n"," |  \n"," |  tol : float, optional (default=1e-3)\n"," |      Tolerance for stopping criterion.\n"," |  \n"," |  cache_size : float, optional\n"," |      Specify the size of the kernel cache (in MB).\n"," |  \n"," |  class_weight : {dict, 'balanced'}, optional\n"," |      Set the parameter C of class i to class_weight[i]*C for\n"," |      SVC. If not given, all classes are supposed to have\n"," |      weight one.\n"," |      The \"balanced\" mode uses the values of y to automatically adjust\n"," |      weights inversely proportional to class frequencies in the input data\n"," |      as ``n_samples / (n_classes * np.bincount(y))``\n"," |  \n"," |  verbose : bool, default: False\n"," |      Enable verbose output. Note that this setting takes advantage of a\n"," |      per-process runtime setting in libsvm that, if enabled, may not work\n"," |      properly in a multithreaded context.\n"," |  \n"," |  max_iter : int, optional (default=-1)\n"," |      Hard limit on iterations within solver, or -1 for no limit.\n"," |  \n"," |  decision_function_shape : 'ovo', 'ovr', default='ovr'\n"," |      Whether to return a one-vs-rest ('ovr') decision function of shape\n"," |      (n_samples, n_classes) as all other classifiers, or the original\n"," |      one-vs-one ('ovo') decision function of libsvm which has shape\n"," |      (n_samples, n_classes * (n_classes - 1) / 2). However, one-vs-one\n"," |      ('ovo') is always used as multi-class strategy.\n"," |  \n"," |      .. versionchanged:: 0.19\n"," |          decision_function_shape is 'ovr' by default.\n"," |  \n"," |      .. versionadded:: 0.17\n"," |         *decision_function_shape='ovr'* is recommended.\n"," |  \n"," |      .. versionchanged:: 0.17\n"," |         Deprecated *decision_function_shape='ovo' and None*.\n"," |  \n"," |  break_ties : bool, optional (default=False)\n"," |      If true, ``decision_function_shape='ovr'``, and number of classes > 2,\n"," |      :term:`predict` will break ties according to the confidence values of\n"," |      :term:`decision_function`; otherwise the first class among the tied\n"," |      classes is returned. Please note that breaking ties comes at a\n"," |      relatively high computational cost compared to a simple predict.\n"," |  \n"," |      .. versionadded:: 0.22\n"," |  \n"," |  random_state : int, RandomState instance or None, optional (default=None)\n"," |      The seed of the pseudo random number generator used when shuffling\n"," |      the data for probability estimates. If int, random_state is the\n"," |      seed used by the random number generator; If RandomState instance,\n"," |      random_state is the random number generator; If None, the random\n"," |      number generator is the RandomState instance used by `np.random`.\n"," |  \n"," |  Attributes\n"," |  ----------\n"," |  support_ : array-like of shape (n_SV)\n"," |      Indices of support vectors.\n"," |  \n"," |  support_vectors_ : array-like of shape (n_SV, n_features)\n"," |      Support vectors.\n"," |  \n"," |  n_support_ : array-like, dtype=int32, shape = [n_class]\n"," |      Number of support vectors for each class.\n"," |  \n"," |  dual_coef_ : array, shape = [n_class-1, n_SV]\n"," |      Coefficients of the support vector in the decision function.\n"," |      For multiclass, coefficient for all 1-vs-1 classifiers.\n"," |      The layout of the coefficients in the multiclass case is somewhat\n"," |      non-trivial. See the section about multi-class classification in the\n"," |      SVM section of the User Guide for details.\n"," |  \n"," |  coef_ : array, shape = [n_class * (n_class-1) / 2, n_features]\n"," |      Weights assigned to the features (coefficients in the primal\n"," |      problem). This is only available in the case of a linear kernel.\n"," |  \n"," |      `coef_` is a readonly property derived from `dual_coef_` and\n"," |      `support_vectors_`.\n"," |  \n"," |  intercept_ : ndarray of shape (n_class * (n_class-1) / 2,)\n"," |      Constants in decision function.\n"," |  \n"," |  fit_status_ : int\n"," |      0 if correctly fitted, 1 otherwise (will raise warning)\n"," |  \n"," |  classes_ : array of shape (n_classes,)\n"," |      The classes labels.\n"," |  \n"," |  probA_ : array, shape = [n_class * (n_class-1) / 2]\n"," |  probB_ : array, shape = [n_class * (n_class-1) / 2]\n"," |      If `probability=True`, it corresponds to the parameters learned in\n"," |      Platt scaling to produce probability estimates from decision values.\n"," |      If `probability=False`, it's an empty array. Platt scaling uses the\n"," |      logistic function\n"," |      ``1 / (1 + exp(decision_value * probA_ + probB_))``\n"," |      where ``probA_`` and ``probB_`` are learned from the dataset [2]_. For\n"," |      more information on the multiclass case and training procedure see\n"," |      section 8 of [1]_.\n"," |  \n"," |  class_weight_ : ndarray of shape (n_class,)\n"," |      Multipliers of parameter C for each class.\n"," |      Computed based on the ``class_weight`` parameter.\n"," |  \n"," |  shape_fit_ : tuple of int of shape (n_dimensions_of_X,)\n"," |      Array dimensions of training vector ``X``.\n"," |  \n"," |  Examples\n"," |  --------\n"," |  >>> import numpy as np\n"," |  >>> X = np.array([[-1, -1], [-2, -1], [1, 1], [2, 1]])\n"," |  >>> y = np.array([1, 1, 2, 2])\n"," |  >>> from sklearn.svm import SVC\n"," |  >>> clf = SVC(gamma='auto')\n"," |  >>> clf.fit(X, y)\n"," |  SVC(gamma='auto')\n"," |  >>> print(clf.predict([[-0.8, -1]]))\n"," |  [1]\n"," |  \n"," |  See also\n"," |  --------\n"," |  SVR\n"," |      Support Vector Machine for Regression implemented using libsvm.\n"," |  \n"," |  LinearSVC\n"," |      Scalable Linear Support Vector Machine for classification\n"," |      implemented using liblinear. Check the See also section of\n"," |      LinearSVC for more comparison element.\n"," |  \n"," |  References\n"," |  ----------\n"," |  .. [1] `LIBSVM: A Library for Support Vector Machines\n"," |      <http://www.csie.ntu.edu.tw/~cjlin/papers/libsvm.pdf>`_\n"," |  \n"," |  .. [2] `Platt, John (1999). \"Probabilistic outputs for support vector\n"," |      machines and comparison to regularizedlikelihood methods.\"\n"," |      <http://citeseer.ist.psu.edu/viewdoc/summary?doi=10.1.1.41.1639>`_\n"," |  \n"," |  Method resolution order:\n"," |      SVC\n"," |      sklearn.svm._base.BaseSVC\n"," |      sklearn.base.ClassifierMixin\n"," |      sklearn.svm._base.BaseLibSVM\n"," |      sklearn.base.BaseEstimator\n"," |      builtins.object\n"," |  \n"," |  Methods defined here:\n"," |  \n"," |  __init__(self, C=1.0, kernel='rbf', degree=3, gamma='scale', coef0=0.0, shrinking=True, probability=False, tol=0.001, cache_size=200, class_weight=None, verbose=False, max_iter=-1, decision_function_shape='ovr', break_ties=False, random_state=None)\n"," |      Initialize self.  See help(type(self)) for accurate signature.\n"," |  \n"," |  ----------------------------------------------------------------------\n"," |  Data and other attributes defined here:\n"," |  \n"," |  __abstractmethods__ = frozenset()\n"," |  \n"," |  ----------------------------------------------------------------------\n"," |  Methods inherited from sklearn.svm._base.BaseSVC:\n"," |  \n"," |  decision_function(self, X)\n"," |      Evaluates the decision function for the samples in X.\n"," |      \n"," |      Parameters\n"," |      ----------\n"," |      X : array-like, shape (n_samples, n_features)\n"," |      \n"," |      Returns\n"," |      -------\n"," |      X : array-like, shape (n_samples, n_classes * (n_classes-1) / 2)\n"," |          Returns the decision function of the sample for each class\n"," |          in the model.\n"," |          If decision_function_shape='ovr', the shape is (n_samples,\n"," |          n_classes).\n"," |      \n"," |      Notes\n"," |      -----\n"," |      If decision_function_shape='ovo', the function values are proportional\n"," |      to the distance of the samples X to the separating hyperplane. If the\n"," |      exact distances are required, divide the function values by the norm of\n"," |      the weight vector (``coef_``). See also `this question\n"," |      <https://stats.stackexchange.com/questions/14876/\n"," |      interpreting-distance-from-hyperplane-in-svm>`_ for further details.\n"," |      If decision_function_shape='ovr', the decision function is a monotonic\n"," |      transformation of ovo decision function.\n"," |  \n"," |  predict(self, X)\n"," |      Perform classification on samples in X.\n"," |      \n"," |      For an one-class model, +1 or -1 is returned.\n"," |      \n"," |      Parameters\n"," |      ----------\n"," |      X : {array-like, sparse matrix}, shape (n_samples, n_features)\n"," |          For kernel=\"precomputed\", the expected shape of X is\n"," |          [n_samples_test, n_samples_train]\n"," |      \n"," |      Returns\n"," |      -------\n"," |      y_pred : array, shape (n_samples,)\n"," |          Class labels for samples in X.\n"," |  \n"," |  ----------------------------------------------------------------------\n"," |  Data descriptors inherited from sklearn.svm._base.BaseSVC:\n"," |  \n"," |  predict_log_proba\n"," |      Compute log probabilities of possible outcomes for samples in X.\n"," |      \n"," |      The model need to have probability information computed at training\n"," |      time: fit with attribute `probability` set to True.\n"," |      \n"," |      Parameters\n"," |      ----------\n"," |      X : array-like, shape (n_samples, n_features)\n"," |          For kernel=\"precomputed\", the expected shape of X is\n"," |          [n_samples_test, n_samples_train]\n"," |      \n"," |      Returns\n"," |      -------\n"," |      T : array-like, shape (n_samples, n_classes)\n"," |          Returns the log-probabilities of the sample for each class in\n"," |          the model. The columns correspond to the classes in sorted\n"," |          order, as they appear in the attribute :term:`classes_`.\n"," |      \n"," |      Notes\n"," |      -----\n"," |      The probability model is created using cross validation, so\n"," |      the results can be slightly different than those obtained by\n"," |      predict. Also, it will produce meaningless results on very small\n"," |      datasets.\n"," |  \n"," |  predict_proba\n"," |      Compute probabilities of possible outcomes for samples in X.\n"," |      \n"," |      The model need to have probability information computed at training\n"," |      time: fit with attribute `probability` set to True.\n"," |      \n"," |      Parameters\n"," |      ----------\n"," |      X : array-like, shape (n_samples, n_features)\n"," |          For kernel=\"precomputed\", the expected shape of X is\n"," |          [n_samples_test, n_samples_train]\n"," |      \n"," |      Returns\n"," |      -------\n"," |      T : array-like, shape (n_samples, n_classes)\n"," |          Returns the probability of the sample for each class in\n"," |          the model. The columns correspond to the classes in sorted\n"," |          order, as they appear in the attribute :term:`classes_`.\n"," |      \n"," |      Notes\n"," |      -----\n"," |      The probability model is created using cross validation, so\n"," |      the results can be slightly different than those obtained by\n"," |      predict. Also, it will produce meaningless results on very small\n"," |      datasets.\n"," |  \n"," |  ----------------------------------------------------------------------\n"," |  Methods inherited from sklearn.base.ClassifierMixin:\n"," |  \n"," |  score(self, X, y, sample_weight=None)\n"," |      Return the mean accuracy on the given test data and labels.\n"," |      \n"," |      In multi-label classification, this is the subset accuracy\n"," |      which is a harsh metric since you require for each sample that\n"," |      each label set be correctly predicted.\n"," |      \n"," |      Parameters\n"," |      ----------\n"," |      X : array-like of shape (n_samples, n_features)\n"," |          Test samples.\n"," |      \n"," |      y : array-like of shape (n_samples,) or (n_samples, n_outputs)\n"," |          True labels for X.\n"," |      \n"," |      sample_weight : array-like of shape (n_samples,), default=None\n"," |          Sample weights.\n"," |      \n"," |      Returns\n"," |      -------\n"," |      score : float\n"," |          Mean accuracy of self.predict(X) wrt. y.\n"," |  \n"," |  ----------------------------------------------------------------------\n"," |  Data descriptors inherited from sklearn.base.ClassifierMixin:\n"," |  \n"," |  __dict__\n"," |      dictionary for instance variables (if defined)\n"," |  \n"," |  __weakref__\n"," |      list of weak references to the object (if defined)\n"," |  \n"," |  ----------------------------------------------------------------------\n"," |  Methods inherited from sklearn.svm._base.BaseLibSVM:\n"," |  \n"," |  fit(self, X, y, sample_weight=None)\n"," |      Fit the SVM model according to the given training data.\n"," |      \n"," |      Parameters\n"," |      ----------\n"," |      X : {array-like, sparse matrix}, shape (n_samples, n_features)\n"," |          Training vectors, where n_samples is the number of samples\n"," |          and n_features is the number of features.\n"," |          For kernel=\"precomputed\", the expected shape of X is\n"," |          (n_samples, n_samples).\n"," |      \n"," |      y : array-like, shape (n_samples,)\n"," |          Target values (class labels in classification, real numbers in\n"," |          regression)\n"," |      \n"," |      sample_weight : array-like, shape (n_samples,)\n"," |          Per-sample weights. Rescale C per sample. Higher weights\n"," |          force the classifier to put more emphasis on these points.\n"," |      \n"," |      Returns\n"," |      -------\n"," |      self : object\n"," |      \n"," |      Notes\n"," |      -----\n"," |      If X and y are not C-ordered and contiguous arrays of np.float64 and\n"," |      X is not a scipy.sparse.csr_matrix, X and/or y may be copied.\n"," |      \n"," |      If X is a dense array, then the other methods will not support sparse\n"," |      matrices as input.\n"," |  \n"," |  ----------------------------------------------------------------------\n"," |  Data descriptors inherited from sklearn.svm._base.BaseLibSVM:\n"," |  \n"," |  coef_\n"," |  \n"," |  n_support_\n"," |  \n"," |  ----------------------------------------------------------------------\n"," |  Methods inherited from sklearn.base.BaseEstimator:\n"," |  \n"," |  __getstate__(self)\n"," |  \n"," |  __repr__(self, N_CHAR_MAX=700)\n"," |      Return repr(self).\n"," |  \n"," |  __setstate__(self, state)\n"," |  \n"," |  get_params(self, deep=True)\n"," |      Get parameters for this estimator.\n"," |      \n"," |      Parameters\n"," |      ----------\n"," |      deep : bool, default=True\n"," |          If True, will return the parameters for this estimator and\n"," |          contained subobjects that are estimators.\n"," |      \n"," |      Returns\n"," |      -------\n"," |      params : mapping of string to any\n"," |          Parameter names mapped to their values.\n"," |  \n"," |  set_params(self, **params)\n"," |      Set the parameters of this estimator.\n"," |      \n"," |      The method works on simple estimators as well as on nested objects\n"," |      (such as pipelines). The latter have parameters of the form\n"," |      ``<component>__<parameter>`` so that it's possible to update each\n"," |      component of a nested object.\n"," |      \n"," |      Parameters\n"," |      ----------\n"," |      **params : dict\n"," |          Estimator parameters.\n"," |      \n"," |      Returns\n"," |      -------\n"," |      self : object\n"," |          Estimator instance.\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"izSoJNGuvd_r","colab_type":"code","colab":{}},"source":["predictions = model.predict(X_test)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"nLVo1eO9vzXr","colab_type":"code","colab":{}},"source":["from sklearn.metrics import classification_report,confusion_matrix"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"wJDrum7Uv3Hi","colab_type":"code","outputId":"445a934a-227d-4047-d657-854ce2c198b9","executionInfo":{"status":"ok","timestamp":1579158372968,"user_tz":-330,"elapsed":2803,"user":{"displayName":"Venkatesh Nagandla","photoUrl":"","userId":"00105523213734113975"}},"colab":{"base_uri":"https://localhost:8080/","height":254}},"source":["print(classification_report(y_test,predictions))\n","\n","print('\\n')\n","print(confusion_matrix(y_test,predictions))"],"execution_count":19,"outputs":[{"output_type":"stream","text":["              precision    recall  f1-score   support\n","\n","           0       0.95      0.85      0.90        66\n","           1       0.91      0.97      0.94       105\n","\n","    accuracy                           0.92       171\n","   macro avg       0.93      0.91      0.92       171\n","weighted avg       0.93      0.92      0.92       171\n","\n","\n","\n","[[ 56  10]\n"," [  3 102]]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"PXxzvU6mwFMr","colab_type":"code","colab":{}},"source":["from sklearn.model_selection import GridSearchCV"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"oM0HG95QwrYu","colab_type":"code","colab":{}},"source":["param_grid = {'C': [0.1,1, 10, 100, 1000], 'gamma': [1,0.1,0.01,0.001,0.0001], 'kernel': ['rbf']} "],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"hD2EoND5iolu","colab_type":"code","colab":{}},"source":["grid = GridSearchCV(SVC(),param_grid,refit=True,verbose=3)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"4i-xgKcSkAJp","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":1000},"outputId":"036c6633-4f0a-4971-f8e8-0aa4ba3fc657","executionInfo":{"status":"ok","timestamp":1579158374439,"user_tz":-330,"elapsed":4192,"user":{"displayName":"Venkatesh Nagandla","photoUrl":"","userId":"00105523213734113975"}}},"source":["# May take awhile!\n","grid.fit(X_train,y_train)"],"execution_count":23,"outputs":[{"output_type":"stream","text":["Fitting 5 folds for each of 25 candidates, totalling 125 fits\n","[CV] C=0.1, gamma=1, kernel=rbf ......................................\n","[CV] .......... C=0.1, gamma=1, kernel=rbf, score=0.637, total=   0.0s\n","[CV] C=0.1, gamma=1, kernel=rbf ......................................\n","[CV] .......... C=0.1, gamma=1, kernel=rbf, score=0.637, total=   0.0s\n","[CV] C=0.1, gamma=1, kernel=rbf ......................................\n","[CV] .......... C=0.1, gamma=1, kernel=rbf, score=0.625, total=   0.0s\n","[CV] C=0.1, gamma=1, kernel=rbf ......................................\n","[CV] .......... C=0.1, gamma=1, kernel=rbf, score=0.633, total=   0.0s\n","[CV] C=0.1, gamma=1, kernel=rbf ......................................\n","[CV] .......... C=0.1, gamma=1, kernel=rbf, score=0.633, total=   0.0s\n","[CV] C=0.1, gamma=0.1, kernel=rbf ....................................\n","[CV] ........ C=0.1, gamma=0.1, kernel=rbf, score=0.637, total=   0.0s\n","[CV] C=0.1, gamma=0.1, kernel=rbf ....................................\n","[CV] ........ C=0.1, gamma=0.1, kernel=rbf, score=0.637, total=   0.0s\n","[CV] C=0.1, gamma=0.1, kernel=rbf ....................................\n","[CV] ........ C=0.1, gamma=0.1, kernel=rbf, score=0.625, total=   0.0s\n","[CV] C=0.1, gamma=0.1, kernel=rbf ....................................\n","[CV] ........ C=0.1, gamma=0.1, kernel=rbf, score=0.633, total=   0.0s\n","[CV] C=0.1, gamma=0.1, kernel=rbf ....................................\n","[CV] ........ C=0.1, gamma=0.1, kernel=rbf, score=0.633, total=   0.0s\n","[CV] C=0.1, gamma=0.01, kernel=rbf ...................................\n","[CV] ....... C=0.1, gamma=0.01, kernel=rbf, score=0.637, total=   0.0s\n","[CV] C=0.1, gamma=0.01, kernel=rbf ...................................\n","[CV] ....... C=0.1, gamma=0.01, kernel=rbf, score=0.637, total=   0.0s\n","[CV] C=0.1, gamma=0.01, kernel=rbf ...................................\n"],"name":"stdout"},{"output_type":"stream","text":["[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n","[Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    0.0s remaining:    0.0s\n","[Parallel(n_jobs=1)]: Done   2 out of   2 | elapsed:    0.0s remaining:    0.0s\n"],"name":"stderr"},{"output_type":"stream","text":["[CV] ....... C=0.1, gamma=0.01, kernel=rbf, score=0.625, total=   0.0s\n","[CV] C=0.1, gamma=0.01, kernel=rbf ...................................\n","[CV] ....... C=0.1, gamma=0.01, kernel=rbf, score=0.633, total=   0.0s\n","[CV] C=0.1, gamma=0.01, kernel=rbf ...................................\n","[CV] ....... C=0.1, gamma=0.01, kernel=rbf, score=0.633, total=   0.0s\n","[CV] C=0.1, gamma=0.001, kernel=rbf ..................................\n","[CV] ...... C=0.1, gamma=0.001, kernel=rbf, score=0.637, total=   0.0s\n","[CV] C=0.1, gamma=0.001, kernel=rbf ..................................\n","[CV] ...... C=0.1, gamma=0.001, kernel=rbf, score=0.637, total=   0.0s\n","[CV] C=0.1, gamma=0.001, kernel=rbf ..................................\n","[CV] ...... C=0.1, gamma=0.001, kernel=rbf, score=0.625, total=   0.0s\n","[CV] C=0.1, gamma=0.001, kernel=rbf ..................................\n","[CV] ...... C=0.1, gamma=0.001, kernel=rbf, score=0.633, total=   0.0s\n","[CV] C=0.1, gamma=0.001, kernel=rbf ..................................\n","[CV] ...... C=0.1, gamma=0.001, kernel=rbf, score=0.633, total=   0.0s\n","[CV] C=0.1, gamma=0.0001, kernel=rbf .................................\n","[CV] ..... C=0.1, gamma=0.0001, kernel=rbf, score=0.887, total=   0.0s\n","[CV] C=0.1, gamma=0.0001, kernel=rbf .................................\n","[CV] ..... C=0.1, gamma=0.0001, kernel=rbf, score=0.938, total=   0.0s\n","[CV] C=0.1, gamma=0.0001, kernel=rbf .................................\n","[CV] ..... C=0.1, gamma=0.0001, kernel=rbf, score=0.963, total=   0.0s\n","[CV] C=0.1, gamma=0.0001, kernel=rbf .................................\n","[CV] ..... C=0.1, gamma=0.0001, kernel=rbf, score=0.962, total=   0.0s\n","[CV] C=0.1, gamma=0.0001, kernel=rbf .................................\n","[CV] ..... C=0.1, gamma=0.0001, kernel=rbf, score=0.886, total=   0.0s\n","[CV] C=1, gamma=1, kernel=rbf ........................................\n","[CV] ............ C=1, gamma=1, kernel=rbf, score=0.637, total=   0.0s\n","[CV] C=1, gamma=1, kernel=rbf ........................................\n","[CV] ............ C=1, gamma=1, kernel=rbf, score=0.637, total=   0.0s\n","[CV] C=1, gamma=1, kernel=rbf ........................................\n","[CV] ............ C=1, gamma=1, kernel=rbf, score=0.625, total=   0.0s\n","[CV] C=1, gamma=1, kernel=rbf ........................................\n","[CV] ............ C=1, gamma=1, kernel=rbf, score=0.633, total=   0.0s\n","[CV] C=1, gamma=1, kernel=rbf ........................................\n","[CV] ............ C=1, gamma=1, kernel=rbf, score=0.633, total=   0.0s\n","[CV] C=1, gamma=0.1, kernel=rbf ......................................\n","[CV] .......... C=1, gamma=0.1, kernel=rbf, score=0.637, total=   0.0s\n","[CV] C=1, gamma=0.1, kernel=rbf ......................................\n","[CV] .......... C=1, gamma=0.1, kernel=rbf, score=0.637, total=   0.0s\n","[CV] C=1, gamma=0.1, kernel=rbf ......................................\n","[CV] .......... C=1, gamma=0.1, kernel=rbf, score=0.625, total=   0.0s\n","[CV] C=1, gamma=0.1, kernel=rbf ......................................\n","[CV] .......... C=1, gamma=0.1, kernel=rbf, score=0.633, total=   0.0s\n","[CV] C=1, gamma=0.1, kernel=rbf ......................................\n","[CV] .......... C=1, gamma=0.1, kernel=rbf, score=0.633, total=   0.0s\n","[CV] C=1, gamma=0.01, kernel=rbf .....................................\n","[CV] ......... C=1, gamma=0.01, kernel=rbf, score=0.637, total=   0.0s\n","[CV] C=1, gamma=0.01, kernel=rbf .....................................\n","[CV] ......... C=1, gamma=0.01, kernel=rbf, score=0.637, total=   0.0s\n","[CV] C=1, gamma=0.01, kernel=rbf .....................................\n","[CV] ......... C=1, gamma=0.01, kernel=rbf, score=0.625, total=   0.0s\n","[CV] C=1, gamma=0.01, kernel=rbf .....................................\n","[CV] ......... C=1, gamma=0.01, kernel=rbf, score=0.633, total=   0.0s\n","[CV] C=1, gamma=0.01, kernel=rbf .....................................\n","[CV] ......... C=1, gamma=0.01, kernel=rbf, score=0.633, total=   0.0s\n","[CV] C=1, gamma=0.001, kernel=rbf ....................................\n","[CV] ........ C=1, gamma=0.001, kernel=rbf, score=0.900, total=   0.0s\n","[CV] C=1, gamma=0.001, kernel=rbf ....................................\n","[CV] ........ C=1, gamma=0.001, kernel=rbf, score=0.912, total=   0.0s\n","[CV] C=1, gamma=0.001, kernel=rbf ....................................\n","[CV] ........ C=1, gamma=0.001, kernel=rbf, score=0.925, total=   0.0s\n","[CV] C=1, gamma=0.001, kernel=rbf ....................................\n","[CV] ........ C=1, gamma=0.001, kernel=rbf, score=0.962, total=   0.0s\n","[CV] C=1, gamma=0.001, kernel=rbf ....................................\n","[CV] ........ C=1, gamma=0.001, kernel=rbf, score=0.937, total=   0.0s\n","[CV] C=1, gamma=0.0001, kernel=rbf ...................................\n","[CV] ....... C=1, gamma=0.0001, kernel=rbf, score=0.912, total=   0.0s\n","[CV] C=1, gamma=0.0001, kernel=rbf ...................................\n","[CV] ....... C=1, gamma=0.0001, kernel=rbf, score=0.950, total=   0.0s\n","[CV] C=1, gamma=0.0001, kernel=rbf ...................................\n","[CV] ....... C=1, gamma=0.0001, kernel=rbf, score=0.975, total=   0.0s\n","[CV] C=1, gamma=0.0001, kernel=rbf ...................................\n","[CV] ....... C=1, gamma=0.0001, kernel=rbf, score=0.962, total=   0.0s\n","[CV] C=1, gamma=0.0001, kernel=rbf ...................................\n","[CV] ....... C=1, gamma=0.0001, kernel=rbf, score=0.937, total=   0.0s\n","[CV] C=10, gamma=1, kernel=rbf .......................................\n","[CV] ........... C=10, gamma=1, kernel=rbf, score=0.637, total=   0.0s\n","[CV] C=10, gamma=1, kernel=rbf .......................................\n","[CV] ........... C=10, gamma=1, kernel=rbf, score=0.637, total=   0.0s\n","[CV] C=10, gamma=1, kernel=rbf .......................................\n","[CV] ........... C=10, gamma=1, kernel=rbf, score=0.625, total=   0.0s\n","[CV] C=10, gamma=1, kernel=rbf .......................................\n","[CV] ........... C=10, gamma=1, kernel=rbf, score=0.633, total=   0.0s\n","[CV] C=10, gamma=1, kernel=rbf .......................................\n","[CV] ........... C=10, gamma=1, kernel=rbf, score=0.633, total=   0.0s\n","[CV] C=10, gamma=0.1, kernel=rbf .....................................\n","[CV] ......... C=10, gamma=0.1, kernel=rbf, score=0.637, total=   0.0s\n","[CV] C=10, gamma=0.1, kernel=rbf .....................................\n","[CV] ......... C=10, gamma=0.1, kernel=rbf, score=0.637, total=   0.0s\n","[CV] C=10, gamma=0.1, kernel=rbf .....................................\n","[CV] ......... C=10, gamma=0.1, kernel=rbf, score=0.625, total=   0.0s\n","[CV] C=10, gamma=0.1, kernel=rbf .....................................\n","[CV] ......... C=10, gamma=0.1, kernel=rbf, score=0.633, total=   0.0s\n","[CV] C=10, gamma=0.1, kernel=rbf .....................................\n","[CV] ......... C=10, gamma=0.1, kernel=rbf, score=0.633, total=   0.0s\n","[CV] C=10, gamma=0.01, kernel=rbf ....................................\n","[CV] ........ C=10, gamma=0.01, kernel=rbf, score=0.637, total=   0.0s\n","[CV] C=10, gamma=0.01, kernel=rbf ....................................\n","[CV] ........ C=10, gamma=0.01, kernel=rbf, score=0.637, total=   0.0s\n","[CV] C=10, gamma=0.01, kernel=rbf ....................................\n","[CV] ........ C=10, gamma=0.01, kernel=rbf, score=0.613, total=   0.0s\n","[CV] C=10, gamma=0.01, kernel=rbf ....................................\n","[CV] ........ C=10, gamma=0.01, kernel=rbf, score=0.633, total=   0.0s\n","[CV] C=10, gamma=0.01, kernel=rbf ....................................\n","[CV] ........ C=10, gamma=0.01, kernel=rbf, score=0.633, total=   0.0s\n","[CV] C=10, gamma=0.001, kernel=rbf ...................................\n","[CV] ....... C=10, gamma=0.001, kernel=rbf, score=0.887, total=   0.0s\n","[CV] C=10, gamma=0.001, kernel=rbf ...................................\n","[CV] ....... C=10, gamma=0.001, kernel=rbf, score=0.912, total=   0.0s\n","[CV] C=10, gamma=0.001, kernel=rbf ...................................\n","[CV] ....... C=10, gamma=0.001, kernel=rbf, score=0.900, total=   0.0s\n","[CV] C=10, gamma=0.001, kernel=rbf ...................................\n","[CV] ....... C=10, gamma=0.001, kernel=rbf, score=0.937, total=   0.0s\n","[CV] C=10, gamma=0.001, kernel=rbf ...................................\n","[CV] ....... C=10, gamma=0.001, kernel=rbf, score=0.924, total=   0.0s\n","[CV] C=10, gamma=0.0001, kernel=rbf ..................................\n","[CV] ...... C=10, gamma=0.0001, kernel=rbf, score=0.950, total=   0.0s\n","[CV] C=10, gamma=0.0001, kernel=rbf ..................................\n","[CV] ...... C=10, gamma=0.0001, kernel=rbf, score=0.912, total=   0.0s\n","[CV] C=10, gamma=0.0001, kernel=rbf ..................................\n","[CV] ...... C=10, gamma=0.0001, kernel=rbf, score=0.975, total=   0.0s\n","[CV] C=10, gamma=0.0001, kernel=rbf ..................................\n","[CV] ...... C=10, gamma=0.0001, kernel=rbf, score=0.949, total=   0.0s\n","[CV] C=10, gamma=0.0001, kernel=rbf ..................................\n","[CV] ...... C=10, gamma=0.0001, kernel=rbf, score=0.949, total=   0.0s\n","[CV] C=100, gamma=1, kernel=rbf ......................................\n","[CV] .......... C=100, gamma=1, kernel=rbf, score=0.637, total=   0.0s\n","[CV] C=100, gamma=1, kernel=rbf ......................................\n","[CV] .......... C=100, gamma=1, kernel=rbf, score=0.637, total=   0.0s\n","[CV] C=100, gamma=1, kernel=rbf ......................................\n","[CV] .......... C=100, gamma=1, kernel=rbf, score=0.625, total=   0.0s\n","[CV] C=100, gamma=1, kernel=rbf ......................................\n","[CV] .......... C=100, gamma=1, kernel=rbf, score=0.633, total=   0.0s\n","[CV] C=100, gamma=1, kernel=rbf ......................................\n","[CV] .......... C=100, gamma=1, kernel=rbf, score=0.633, total=   0.0s\n","[CV] C=100, gamma=0.1, kernel=rbf ....................................\n","[CV] ........ C=100, gamma=0.1, kernel=rbf, score=0.637, total=   0.0s\n","[CV] C=100, gamma=0.1, kernel=rbf ....................................\n","[CV] ........ C=100, gamma=0.1, kernel=rbf, score=0.637, total=   0.0s\n","[CV] C=100, gamma=0.1, kernel=rbf ....................................\n","[CV] ........ C=100, gamma=0.1, kernel=rbf, score=0.625, total=   0.0s\n","[CV] C=100, gamma=0.1, kernel=rbf ....................................\n","[CV] ........ C=100, gamma=0.1, kernel=rbf, score=0.633, total=   0.0s\n","[CV] C=100, gamma=0.1, kernel=rbf ....................................\n","[CV] ........ C=100, gamma=0.1, kernel=rbf, score=0.633, total=   0.0s\n","[CV] C=100, gamma=0.01, kernel=rbf ...................................\n","[CV] ....... C=100, gamma=0.01, kernel=rbf, score=0.637, total=   0.0s\n","[CV] C=100, gamma=0.01, kernel=rbf ...................................\n","[CV] ....... C=100, gamma=0.01, kernel=rbf, score=0.637, total=   0.0s\n","[CV] C=100, gamma=0.01, kernel=rbf ...................................\n","[CV] ....... C=100, gamma=0.01, kernel=rbf, score=0.613, total=   0.0s\n","[CV] C=100, gamma=0.01, kernel=rbf ...................................\n","[CV] ....... C=100, gamma=0.01, kernel=rbf, score=0.633, total=   0.0s\n","[CV] C=100, gamma=0.01, kernel=rbf ...................................\n","[CV] ....... C=100, gamma=0.01, kernel=rbf, score=0.633, total=   0.0s\n","[CV] C=100, gamma=0.001, kernel=rbf ..................................\n","[CV] ...... C=100, gamma=0.001, kernel=rbf, score=0.887, total=   0.0s\n","[CV] C=100, gamma=0.001, kernel=rbf ..................................\n","[CV] ...... C=100, gamma=0.001, kernel=rbf, score=0.912, total=   0.0s\n","[CV] C=100, gamma=0.001, kernel=rbf ..................................\n","[CV] ...... C=100, gamma=0.001, kernel=rbf, score=0.900, total=   0.0s\n","[CV] C=100, gamma=0.001, kernel=rbf ..................................\n","[CV] ...... C=100, gamma=0.001, kernel=rbf, score=0.937, total=   0.0s\n","[CV] C=100, gamma=0.001, kernel=rbf ..................................\n","[CV] ...... C=100, gamma=0.001, kernel=rbf, score=0.924, total=   0.0s\n","[CV] C=100, gamma=0.0001, kernel=rbf .................................\n","[CV] ..... C=100, gamma=0.0001, kernel=rbf, score=0.925, total=   0.0s\n","[CV] C=100, gamma=0.0001, kernel=rbf .................................\n","[CV] ..... C=100, gamma=0.0001, kernel=rbf, score=0.912, total=   0.0s\n","[CV] C=100, gamma=0.0001, kernel=rbf .................................\n","[CV] ..... C=100, gamma=0.0001, kernel=rbf, score=0.975, total=   0.0s\n","[CV] C=100, gamma=0.0001, kernel=rbf .................................\n","[CV] ..... C=100, gamma=0.0001, kernel=rbf, score=0.937, total=   0.0s\n","[CV] C=100, gamma=0.0001, kernel=rbf .................................\n","[CV] ..... C=100, gamma=0.0001, kernel=rbf, score=0.949, total=   0.0s\n","[CV] C=1000, gamma=1, kernel=rbf .....................................\n","[CV] ......... C=1000, gamma=1, kernel=rbf, score=0.637, total=   0.0s\n","[CV] C=1000, gamma=1, kernel=rbf .....................................\n","[CV] ......... C=1000, gamma=1, kernel=rbf, score=0.637, total=   0.0s\n","[CV] C=1000, gamma=1, kernel=rbf .....................................\n","[CV] ......... C=1000, gamma=1, kernel=rbf, score=0.625, total=   0.0s\n","[CV] C=1000, gamma=1, kernel=rbf .....................................\n","[CV] ......... C=1000, gamma=1, kernel=rbf, score=0.633, total=   0.0s\n","[CV] C=1000, gamma=1, kernel=rbf .....................................\n","[CV] ......... C=1000, gamma=1, kernel=rbf, score=0.633, total=   0.0s\n","[CV] C=1000, gamma=0.1, kernel=rbf ...................................\n","[CV] ....... C=1000, gamma=0.1, kernel=rbf, score=0.637, total=   0.0s\n","[CV] C=1000, gamma=0.1, kernel=rbf ...................................\n","[CV] ....... C=1000, gamma=0.1, kernel=rbf, score=0.637, total=   0.0s\n","[CV] C=1000, gamma=0.1, kernel=rbf ...................................\n","[CV] ....... C=1000, gamma=0.1, kernel=rbf, score=0.625, total=   0.0s\n","[CV] C=1000, gamma=0.1, kernel=rbf ...................................\n","[CV] ....... C=1000, gamma=0.1, kernel=rbf, score=0.633, total=   0.0s\n","[CV] C=1000, gamma=0.1, kernel=rbf ...................................\n","[CV] ....... C=1000, gamma=0.1, kernel=rbf, score=0.633, total=   0.0s\n","[CV] C=1000, gamma=0.01, kernel=rbf ..................................\n","[CV] ...... C=1000, gamma=0.01, kernel=rbf, score=0.637, total=   0.0s\n","[CV] C=1000, gamma=0.01, kernel=rbf ..................................\n","[CV] ...... C=1000, gamma=0.01, kernel=rbf, score=0.637, total=   0.0s\n","[CV] C=1000, gamma=0.01, kernel=rbf ..................................\n","[CV] ...... C=1000, gamma=0.01, kernel=rbf, score=0.613, total=   0.0s\n","[CV] C=1000, gamma=0.01, kernel=rbf ..................................\n","[CV] ...... C=1000, gamma=0.01, kernel=rbf, score=0.633, total=   0.0s\n","[CV] C=1000, gamma=0.01, kernel=rbf ..................................\n","[CV] ...... C=1000, gamma=0.01, kernel=rbf, score=0.633, total=   0.0s\n","[CV] C=1000, gamma=0.001, kernel=rbf .................................\n","[CV] ..... C=1000, gamma=0.001, kernel=rbf, score=0.887, total=   0.0s\n","[CV] C=1000, gamma=0.001, kernel=rbf .................................\n","[CV] ..... C=1000, gamma=0.001, kernel=rbf, score=0.912, total=   0.0s\n","[CV] C=1000, gamma=0.001, kernel=rbf .................................\n","[CV] ..... C=1000, gamma=0.001, kernel=rbf, score=0.900, total=   0.0s\n","[CV] C=1000, gamma=0.001, kernel=rbf .................................\n","[CV] ..... C=1000, gamma=0.001, kernel=rbf, score=0.937, total=   0.0s\n","[CV] C=1000, gamma=0.001, kernel=rbf .................................\n","[CV] ..... C=1000, gamma=0.001, kernel=rbf, score=0.924, total=   0.0s\n","[CV] C=1000, gamma=0.0001, kernel=rbf ................................\n","[CV] .... C=1000, gamma=0.0001, kernel=rbf, score=0.938, total=   0.0s\n","[CV] C=1000, gamma=0.0001, kernel=rbf ................................\n","[CV] .... C=1000, gamma=0.0001, kernel=rbf, score=0.912, total=   0.0s\n","[CV] C=1000, gamma=0.0001, kernel=rbf ................................\n","[CV] .... C=1000, gamma=0.0001, kernel=rbf, score=0.963, total=   0.0s\n","[CV] C=1000, gamma=0.0001, kernel=rbf ................................\n","[CV] .... C=1000, gamma=0.0001, kernel=rbf, score=0.924, total=   0.0s\n","[CV] C=1000, gamma=0.0001, kernel=rbf ................................\n","[CV] .... C=1000, gamma=0.0001, kernel=rbf, score=0.962, total=   0.0s\n"],"name":"stdout"},{"output_type":"stream","text":["[Parallel(n_jobs=1)]: Done 125 out of 125 | elapsed:    1.9s finished\n"],"name":"stderr"},{"output_type":"execute_result","data":{"text/plain":["GridSearchCV(cv=None, error_score=nan,\n","             estimator=SVC(C=1.0, break_ties=False, cache_size=200,\n","                           class_weight=None, coef0=0.0,\n","                           decision_function_shape='ovr', degree=3,\n","                           gamma='scale', kernel='rbf', max_iter=-1,\n","                           probability=False, random_state=None, shrinking=True,\n","                           tol=0.001, verbose=False),\n","             iid='deprecated', n_jobs=None,\n","             param_grid={'C': [0.1, 1, 10, 100, 1000],\n","                         'gamma': [1, 0.1, 0.01, 0.001, 0.0001],\n","                         'kernel': ['rbf']},\n","             pre_dispatch='2*n_jobs', refit=True, return_train_score=False,\n","             scoring=None, verbose=3)"]},"metadata":{"tags":[]},"execution_count":23}]},{"cell_type":"code","metadata":{"id":"Fl3jEmSikKfi","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":35},"outputId":"e7dc8124-d9c9-4c6f-c798-740aed898c64","executionInfo":{"status":"ok","timestamp":1579158374443,"user_tz":-330,"elapsed":4166,"user":{"displayName":"Venkatesh Nagandla","photoUrl":"","userId":"00105523213734113975"}}},"source":["grid.best_params_"],"execution_count":24,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'C': 1, 'gamma': 0.0001, 'kernel': 'rbf'}"]},"metadata":{"tags":[]},"execution_count":24}]},{"cell_type":"code","metadata":{"id":"ttFyql2CJsG9","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":90},"outputId":"d24a8748-7736-42ea-d5a0-c9bcade4ea49","executionInfo":{"status":"ok","timestamp":1579158428852,"user_tz":-330,"elapsed":863,"user":{"displayName":"Venkatesh Nagandla","photoUrl":"","userId":"00105523213734113975"}}},"source":["grid.best_estimator_"],"execution_count":25,"outputs":[{"output_type":"execute_result","data":{"text/plain":["SVC(C=1, break_ties=False, cache_size=200, class_weight=None, coef0=0.0,\n","    decision_function_shape='ovr', degree=3, gamma=0.0001, kernel='rbf',\n","    max_iter=-1, probability=False, random_state=None, shrinking=True,\n","    tol=0.001, verbose=False)"]},"metadata":{"tags":[]},"execution_count":25}]},{"cell_type":"code","metadata":{"id":"LYvLXP5HLVig","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":1000},"outputId":"5cdf299d-0cfe-4243-c7ec-13827ebd5fed","executionInfo":{"status":"ok","timestamp":1579158525551,"user_tz":-330,"elapsed":892,"user":{"displayName":"Venkatesh Nagandla","photoUrl":"","userId":"00105523213734113975"}}},"source":["help(grid.best_estimator_)"],"execution_count":26,"outputs":[{"output_type":"stream","text":["Help on SVC in module sklearn.svm._classes object:\n","\n","class SVC(sklearn.svm._base.BaseSVC)\n"," |  C-Support Vector Classification.\n"," |  \n"," |  The implementation is based on libsvm. The fit time scales at least\n"," |  quadratically with the number of samples and may be impractical\n"," |  beyond tens of thousands of samples. For large datasets\n"," |  consider using :class:`sklearn.svm.LinearSVC` or\n"," |  :class:`sklearn.linear_model.SGDClassifier` instead, possibly after a\n"," |  :class:`sklearn.kernel_approximation.Nystroem` transformer.\n"," |  \n"," |  The multiclass support is handled according to a one-vs-one scheme.\n"," |  \n"," |  For details on the precise mathematical formulation of the provided\n"," |  kernel functions and how `gamma`, `coef0` and `degree` affect each\n"," |  other, see the corresponding section in the narrative documentation:\n"," |  :ref:`svm_kernels`.\n"," |  \n"," |  Read more in the :ref:`User Guide <svm_classification>`.\n"," |  \n"," |  Parameters\n"," |  ----------\n"," |  C : float, optional (default=1.0)\n"," |      Regularization parameter. The strength of the regularization is\n"," |      inversely proportional to C. Must be strictly positive. The penalty\n"," |      is a squared l2 penalty.\n"," |  \n"," |  kernel : string, optional (default='rbf')\n"," |      Specifies the kernel type to be used in the algorithm.\n"," |      It must be one of 'linear', 'poly', 'rbf', 'sigmoid', 'precomputed' or\n"," |      a callable.\n"," |      If none is given, 'rbf' will be used. If a callable is given it is\n"," |      used to pre-compute the kernel matrix from data matrices; that matrix\n"," |      should be an array of shape ``(n_samples, n_samples)``.\n"," |  \n"," |  degree : int, optional (default=3)\n"," |      Degree of the polynomial kernel function ('poly').\n"," |      Ignored by all other kernels.\n"," |  \n"," |  gamma : {'scale', 'auto'} or float, optional (default='scale')\n"," |      Kernel coefficient for 'rbf', 'poly' and 'sigmoid'.\n"," |  \n"," |      - if ``gamma='scale'`` (default) is passed then it uses\n"," |        1 / (n_features * X.var()) as value of gamma,\n"," |      - if 'auto', uses 1 / n_features.\n"," |  \n"," |      .. versionchanged:: 0.22\n"," |         The default value of ``gamma`` changed from 'auto' to 'scale'.\n"," |  \n"," |  coef0 : float, optional (default=0.0)\n"," |      Independent term in kernel function.\n"," |      It is only significant in 'poly' and 'sigmoid'.\n"," |  \n"," |  shrinking : boolean, optional (default=True)\n"," |      Whether to use the shrinking heuristic.\n"," |  \n"," |  probability : boolean, optional (default=False)\n"," |      Whether to enable probability estimates. This must be enabled prior\n"," |      to calling `fit`, will slow down that method as it internally uses\n"," |      5-fold cross-validation, and `predict_proba` may be inconsistent with\n"," |      `predict`. Read more in the :ref:`User Guide <scores_probabilities>`.\n"," |  \n"," |  tol : float, optional (default=1e-3)\n"," |      Tolerance for stopping criterion.\n"," |  \n"," |  cache_size : float, optional\n"," |      Specify the size of the kernel cache (in MB).\n"," |  \n"," |  class_weight : {dict, 'balanced'}, optional\n"," |      Set the parameter C of class i to class_weight[i]*C for\n"," |      SVC. If not given, all classes are supposed to have\n"," |      weight one.\n"," |      The \"balanced\" mode uses the values of y to automatically adjust\n"," |      weights inversely proportional to class frequencies in the input data\n"," |      as ``n_samples / (n_classes * np.bincount(y))``\n"," |  \n"," |  verbose : bool, default: False\n"," |      Enable verbose output. Note that this setting takes advantage of a\n"," |      per-process runtime setting in libsvm that, if enabled, may not work\n"," |      properly in a multithreaded context.\n"," |  \n"," |  max_iter : int, optional (default=-1)\n"," |      Hard limit on iterations within solver, or -1 for no limit.\n"," |  \n"," |  decision_function_shape : 'ovo', 'ovr', default='ovr'\n"," |      Whether to return a one-vs-rest ('ovr') decision function of shape\n"," |      (n_samples, n_classes) as all other classifiers, or the original\n"," |      one-vs-one ('ovo') decision function of libsvm which has shape\n"," |      (n_samples, n_classes * (n_classes - 1) / 2). However, one-vs-one\n"," |      ('ovo') is always used as multi-class strategy.\n"," |  \n"," |      .. versionchanged:: 0.19\n"," |          decision_function_shape is 'ovr' by default.\n"," |  \n"," |      .. versionadded:: 0.17\n"," |         *decision_function_shape='ovr'* is recommended.\n"," |  \n"," |      .. versionchanged:: 0.17\n"," |         Deprecated *decision_function_shape='ovo' and None*.\n"," |  \n"," |  break_ties : bool, optional (default=False)\n"," |      If true, ``decision_function_shape='ovr'``, and number of classes > 2,\n"," |      :term:`predict` will break ties according to the confidence values of\n"," |      :term:`decision_function`; otherwise the first class among the tied\n"," |      classes is returned. Please note that breaking ties comes at a\n"," |      relatively high computational cost compared to a simple predict.\n"," |  \n"," |      .. versionadded:: 0.22\n"," |  \n"," |  random_state : int, RandomState instance or None, optional (default=None)\n"," |      The seed of the pseudo random number generator used when shuffling\n"," |      the data for probability estimates. If int, random_state is the\n"," |      seed used by the random number generator; If RandomState instance,\n"," |      random_state is the random number generator; If None, the random\n"," |      number generator is the RandomState instance used by `np.random`.\n"," |  \n"," |  Attributes\n"," |  ----------\n"," |  support_ : array-like of shape (n_SV)\n"," |      Indices of support vectors.\n"," |  \n"," |  support_vectors_ : array-like of shape (n_SV, n_features)\n"," |      Support vectors.\n"," |  \n"," |  n_support_ : array-like, dtype=int32, shape = [n_class]\n"," |      Number of support vectors for each class.\n"," |  \n"," |  dual_coef_ : array, shape = [n_class-1, n_SV]\n"," |      Coefficients of the support vector in the decision function.\n"," |      For multiclass, coefficient for all 1-vs-1 classifiers.\n"," |      The layout of the coefficients in the multiclass case is somewhat\n"," |      non-trivial. See the section about multi-class classification in the\n"," |      SVM section of the User Guide for details.\n"," |  \n"," |  coef_ : array, shape = [n_class * (n_class-1) / 2, n_features]\n"," |      Weights assigned to the features (coefficients in the primal\n"," |      problem). This is only available in the case of a linear kernel.\n"," |  \n"," |      `coef_` is a readonly property derived from `dual_coef_` and\n"," |      `support_vectors_`.\n"," |  \n"," |  intercept_ : ndarray of shape (n_class * (n_class-1) / 2,)\n"," |      Constants in decision function.\n"," |  \n"," |  fit_status_ : int\n"," |      0 if correctly fitted, 1 otherwise (will raise warning)\n"," |  \n"," |  classes_ : array of shape (n_classes,)\n"," |      The classes labels.\n"," |  \n"," |  probA_ : array, shape = [n_class * (n_class-1) / 2]\n"," |  probB_ : array, shape = [n_class * (n_class-1) / 2]\n"," |      If `probability=True`, it corresponds to the parameters learned in\n"," |      Platt scaling to produce probability estimates from decision values.\n"," |      If `probability=False`, it's an empty array. Platt scaling uses the\n"," |      logistic function\n"," |      ``1 / (1 + exp(decision_value * probA_ + probB_))``\n"," |      where ``probA_`` and ``probB_`` are learned from the dataset [2]_. For\n"," |      more information on the multiclass case and training procedure see\n"," |      section 8 of [1]_.\n"," |  \n"," |  class_weight_ : ndarray of shape (n_class,)\n"," |      Multipliers of parameter C for each class.\n"," |      Computed based on the ``class_weight`` parameter.\n"," |  \n"," |  shape_fit_ : tuple of int of shape (n_dimensions_of_X,)\n"," |      Array dimensions of training vector ``X``.\n"," |  \n"," |  Examples\n"," |  --------\n"," |  >>> import numpy as np\n"," |  >>> X = np.array([[-1, -1], [-2, -1], [1, 1], [2, 1]])\n"," |  >>> y = np.array([1, 1, 2, 2])\n"," |  >>> from sklearn.svm import SVC\n"," |  >>> clf = SVC(gamma='auto')\n"," |  >>> clf.fit(X, y)\n"," |  SVC(gamma='auto')\n"," |  >>> print(clf.predict([[-0.8, -1]]))\n"," |  [1]\n"," |  \n"," |  See also\n"," |  --------\n"," |  SVR\n"," |      Support Vector Machine for Regression implemented using libsvm.\n"," |  \n"," |  LinearSVC\n"," |      Scalable Linear Support Vector Machine for classification\n"," |      implemented using liblinear. Check the See also section of\n"," |      LinearSVC for more comparison element.\n"," |  \n"," |  References\n"," |  ----------\n"," |  .. [1] `LIBSVM: A Library for Support Vector Machines\n"," |      <http://www.csie.ntu.edu.tw/~cjlin/papers/libsvm.pdf>`_\n"," |  \n"," |  .. [2] `Platt, John (1999). \"Probabilistic outputs for support vector\n"," |      machines and comparison to regularizedlikelihood methods.\"\n"," |      <http://citeseer.ist.psu.edu/viewdoc/summary?doi=10.1.1.41.1639>`_\n"," |  \n"," |  Method resolution order:\n"," |      SVC\n"," |      sklearn.svm._base.BaseSVC\n"," |      sklearn.base.ClassifierMixin\n"," |      sklearn.svm._base.BaseLibSVM\n"," |      sklearn.base.BaseEstimator\n"," |      builtins.object\n"," |  \n"," |  Methods defined here:\n"," |  \n"," |  __init__(self, C=1.0, kernel='rbf', degree=3, gamma='scale', coef0=0.0, shrinking=True, probability=False, tol=0.001, cache_size=200, class_weight=None, verbose=False, max_iter=-1, decision_function_shape='ovr', break_ties=False, random_state=None)\n"," |      Initialize self.  See help(type(self)) for accurate signature.\n"," |  \n"," |  ----------------------------------------------------------------------\n"," |  Data and other attributes defined here:\n"," |  \n"," |  __abstractmethods__ = frozenset()\n"," |  \n"," |  ----------------------------------------------------------------------\n"," |  Methods inherited from sklearn.svm._base.BaseSVC:\n"," |  \n"," |  decision_function(self, X)\n"," |      Evaluates the decision function for the samples in X.\n"," |      \n"," |      Parameters\n"," |      ----------\n"," |      X : array-like, shape (n_samples, n_features)\n"," |      \n"," |      Returns\n"," |      -------\n"," |      X : array-like, shape (n_samples, n_classes * (n_classes-1) / 2)\n"," |          Returns the decision function of the sample for each class\n"," |          in the model.\n"," |          If decision_function_shape='ovr', the shape is (n_samples,\n"," |          n_classes).\n"," |      \n"," |      Notes\n"," |      -----\n"," |      If decision_function_shape='ovo', the function values are proportional\n"," |      to the distance of the samples X to the separating hyperplane. If the\n"," |      exact distances are required, divide the function values by the norm of\n"," |      the weight vector (``coef_``). See also `this question\n"," |      <https://stats.stackexchange.com/questions/14876/\n"," |      interpreting-distance-from-hyperplane-in-svm>`_ for further details.\n"," |      If decision_function_shape='ovr', the decision function is a monotonic\n"," |      transformation of ovo decision function.\n"," |  \n"," |  predict(self, X)\n"," |      Perform classification on samples in X.\n"," |      \n"," |      For an one-class model, +1 or -1 is returned.\n"," |      \n"," |      Parameters\n"," |      ----------\n"," |      X : {array-like, sparse matrix}, shape (n_samples, n_features)\n"," |          For kernel=\"precomputed\", the expected shape of X is\n"," |          [n_samples_test, n_samples_train]\n"," |      \n"," |      Returns\n"," |      -------\n"," |      y_pred : array, shape (n_samples,)\n"," |          Class labels for samples in X.\n"," |  \n"," |  ----------------------------------------------------------------------\n"," |  Data descriptors inherited from sklearn.svm._base.BaseSVC:\n"," |  \n"," |  predict_log_proba\n"," |      Compute log probabilities of possible outcomes for samples in X.\n"," |      \n"," |      The model need to have probability information computed at training\n"," |      time: fit with attribute `probability` set to True.\n"," |      \n"," |      Parameters\n"," |      ----------\n"," |      X : array-like, shape (n_samples, n_features)\n"," |          For kernel=\"precomputed\", the expected shape of X is\n"," |          [n_samples_test, n_samples_train]\n"," |      \n"," |      Returns\n"," |      -------\n"," |      T : array-like, shape (n_samples, n_classes)\n"," |          Returns the log-probabilities of the sample for each class in\n"," |          the model. The columns correspond to the classes in sorted\n"," |          order, as they appear in the attribute :term:`classes_`.\n"," |      \n"," |      Notes\n"," |      -----\n"," |      The probability model is created using cross validation, so\n"," |      the results can be slightly different than those obtained by\n"," |      predict. Also, it will produce meaningless results on very small\n"," |      datasets.\n"," |  \n"," |  predict_proba\n"," |      Compute probabilities of possible outcomes for samples in X.\n"," |      \n"," |      The model need to have probability information computed at training\n"," |      time: fit with attribute `probability` set to True.\n"," |      \n"," |      Parameters\n"," |      ----------\n"," |      X : array-like, shape (n_samples, n_features)\n"," |          For kernel=\"precomputed\", the expected shape of X is\n"," |          [n_samples_test, n_samples_train]\n"," |      \n"," |      Returns\n"," |      -------\n"," |      T : array-like, shape (n_samples, n_classes)\n"," |          Returns the probability of the sample for each class in\n"," |          the model. The columns correspond to the classes in sorted\n"," |          order, as they appear in the attribute :term:`classes_`.\n"," |      \n"," |      Notes\n"," |      -----\n"," |      The probability model is created using cross validation, so\n"," |      the results can be slightly different than those obtained by\n"," |      predict. Also, it will produce meaningless results on very small\n"," |      datasets.\n"," |  \n"," |  ----------------------------------------------------------------------\n"," |  Methods inherited from sklearn.base.ClassifierMixin:\n"," |  \n"," |  score(self, X, y, sample_weight=None)\n"," |      Return the mean accuracy on the given test data and labels.\n"," |      \n"," |      In multi-label classification, this is the subset accuracy\n"," |      which is a harsh metric since you require for each sample that\n"," |      each label set be correctly predicted.\n"," |      \n"," |      Parameters\n"," |      ----------\n"," |      X : array-like of shape (n_samples, n_features)\n"," |          Test samples.\n"," |      \n"," |      y : array-like of shape (n_samples,) or (n_samples, n_outputs)\n"," |          True labels for X.\n"," |      \n"," |      sample_weight : array-like of shape (n_samples,), default=None\n"," |          Sample weights.\n"," |      \n"," |      Returns\n"," |      -------\n"," |      score : float\n"," |          Mean accuracy of self.predict(X) wrt. y.\n"," |  \n"," |  ----------------------------------------------------------------------\n"," |  Data descriptors inherited from sklearn.base.ClassifierMixin:\n"," |  \n"," |  __dict__\n"," |      dictionary for instance variables (if defined)\n"," |  \n"," |  __weakref__\n"," |      list of weak references to the object (if defined)\n"," |  \n"," |  ----------------------------------------------------------------------\n"," |  Methods inherited from sklearn.svm._base.BaseLibSVM:\n"," |  \n"," |  fit(self, X, y, sample_weight=None)\n"," |      Fit the SVM model according to the given training data.\n"," |      \n"," |      Parameters\n"," |      ----------\n"," |      X : {array-like, sparse matrix}, shape (n_samples, n_features)\n"," |          Training vectors, where n_samples is the number of samples\n"," |          and n_features is the number of features.\n"," |          For kernel=\"precomputed\", the expected shape of X is\n"," |          (n_samples, n_samples).\n"," |      \n"," |      y : array-like, shape (n_samples,)\n"," |          Target values (class labels in classification, real numbers in\n"," |          regression)\n"," |      \n"," |      sample_weight : array-like, shape (n_samples,)\n"," |          Per-sample weights. Rescale C per sample. Higher weights\n"," |          force the classifier to put more emphasis on these points.\n"," |      \n"," |      Returns\n"," |      -------\n"," |      self : object\n"," |      \n"," |      Notes\n"," |      -----\n"," |      If X and y are not C-ordered and contiguous arrays of np.float64 and\n"," |      X is not a scipy.sparse.csr_matrix, X and/or y may be copied.\n"," |      \n"," |      If X is a dense array, then the other methods will not support sparse\n"," |      matrices as input.\n"," |  \n"," |  ----------------------------------------------------------------------\n"," |  Data descriptors inherited from sklearn.svm._base.BaseLibSVM:\n"," |  \n"," |  coef_\n"," |  \n"," |  n_support_\n"," |  \n"," |  ----------------------------------------------------------------------\n"," |  Methods inherited from sklearn.base.BaseEstimator:\n"," |  \n"," |  __getstate__(self)\n"," |  \n"," |  __repr__(self, N_CHAR_MAX=700)\n"," |      Return repr(self).\n"," |  \n"," |  __setstate__(self, state)\n"," |  \n"," |  get_params(self, deep=True)\n"," |      Get parameters for this estimator.\n"," |      \n"," |      Parameters\n"," |      ----------\n"," |      deep : bool, default=True\n"," |          If True, will return the parameters for this estimator and\n"," |          contained subobjects that are estimators.\n"," |      \n"," |      Returns\n"," |      -------\n"," |      params : mapping of string to any\n"," |          Parameter names mapped to their values.\n"," |  \n"," |  set_params(self, **params)\n"," |      Set the parameters of this estimator.\n"," |      \n"," |      The method works on simple estimators as well as on nested objects\n"," |      (such as pipelines). The latter have parameters of the form\n"," |      ``<component>__<parameter>`` so that it's possible to update each\n"," |      component of a nested object.\n"," |      \n"," |      Parameters\n"," |      ----------\n"," |      **params : dict\n"," |          Estimator parameters.\n"," |      \n"," |      Returns\n"," |      -------\n"," |      self : object\n"," |          Estimator instance.\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"4UTSmYckLtIx","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":54},"outputId":"0927b576-acad-43f7-e36f-cee615177230","executionInfo":{"status":"ok","timestamp":1579161943221,"user_tz":-330,"elapsed":1306,"user":{"displayName":"Venkatesh Nagandla","photoUrl":"","userId":"00105523213734113975"}}},"source":["print(confusion_matrix(y_test,grid_predictions))"],"execution_count":29,"outputs":[{"output_type":"stream","text":["[[ 59   7]\n"," [  4 101]]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Bn_zGXRuYt3s","colab_type":"code","colab":{}},"source":["grid_predictions = grid.predict(X_test)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"hwQ9ksaJYWLW","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":181},"outputId":"4db163b8-72d1-49d2-a546-a312dbd417f6","executionInfo":{"status":"ok","timestamp":1579161945640,"user_tz":-330,"elapsed":1042,"user":{"displayName":"Venkatesh Nagandla","photoUrl":"","userId":"00105523213734113975"}}},"source":["print(classification_report(y_test,grid_predictions))"],"execution_count":30,"outputs":[{"output_type":"stream","text":["              precision    recall  f1-score   support\n","\n","           0       0.94      0.89      0.91        66\n","           1       0.94      0.96      0.95       105\n","\n","    accuracy                           0.94       171\n","   macro avg       0.94      0.93      0.93       171\n","weighted avg       0.94      0.94      0.94       171\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"L6TY44gEYwFO","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]}]}